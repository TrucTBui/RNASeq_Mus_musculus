---
title: "RNASeq"
author: "Truc Bui"
date: today
format: 
    html:
        self-contained: true
        toc: true
editor_options: 
    chunk_output_type: console
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

# Load packages and Data

```{r warning=FALSE, message=FALSE}
library(dplyr)
library(biomaRt)
library(ggplot2)
library(sva)
library(pbapply)
library(ggrepel)
library(tximport)
library(DESeq2)
```

```{r}
samples <- list.files("rsem")
expr <- sapply(samples, function(sample){
  file <- paste0("rsem/",sample,"/", sample, ".genes.results")
  quant <- read.csv(file, sep="\t", header=T)
  tpm <- setNames(quant$TPM, quant$gene_id)
  return(tpm)
})
```

```{r}
meta <- read.csv("SraRunTable.csv", header=T) 
meta[, "Organ"] <- as.factor(meta[, "Organ"])
meta[, "condition"] <- as.factor(meta[, "condition"])
expr <- expr[,meta$Run]
```

```{r}
ensembl <- useEnsembl(biomart = "ensembl",
                      dataset = "mmusculus_gene_ensembl")
meta_genes <- getBM(attributes = c("uniprot_gn_id", 
                                   "ensembl_gene_id",
                                   "ensembl_gene_id_version",
                                   "hgnc_symbol",
                                   "description",
                                   "chromosome_name",
                                   "start_position",
                                   "end_position",
                                   "strand"),
                    filters = "uniprot_gn_id",
                    values = rownames(expr),
                    mart = ensembl) %>%
  right_join(data.frame(uniprot_gn_id = rownames(expr)),
             by = "uniprot_gn_id") %>%
  distinct(uniprot_gn_id, .keep_all = TRUE)

expr <- expr[meta_genes$uniprot_gn_id,]
```

# Comparison across samples

```{r}
dim(expr)
```

## Check average expression levels

```{r}
avg_expr <- rowMeans(expr)

layout(matrix(1:2, nrow=1))
hist(log10(avg_expr + 1))
```

```{r}
ggplot(data.frame(avg_expr), aes(x=avg_expr)) +
  geom_histogram(bins = 50) +
  scale_x_continuous(breaks = c(0,1,10,100,1000,10000,20000), trans="log1p", expand=c(0,0)) +
  scale_y_continuous(breaks = c(0,1), expand=c(0,0), trans="log1p") +
  theme_minimal()
```

The y-axis is dominated by the very first bin which includes all the unexpressed genes. Therefore, we need to do a log-transformation on the y-axis.

## Check in how many samples each gene is detected

```{r}
num_det <- rowSums(expr > 0)
hist(num_det)
```

Here we are going to use the threshold of 1) being detected in at least half of the samples, or 2) average TPM\>=1, to define whether a gene is expressed or not.

```{r}
expressed <- rowMeans(expr > 0) >= 0.5 | rowMeans(expr) >= 1
#expr <- expr[which(expressed),]
#meta_genes <- meta_genes[which(expressed),]
meta_genes$expressed <- expressed
```

## Calculate correlation

```{r}
corr_pearson <- cor(log1p(expr[meta_genes$expressed,]))
corr_spearman <- cor(expr[meta_genes$expressed,], method = "spearman")
```

```{r}
hcl_pearson <- hclust(as.dist(1 - corr_pearson))
hcl_spearman <- hclust(as.dist(1 - corr_spearman))

layout(matrix(1:2,nrow=1))
plot(hcl_pearson, labels = meta$Organ)
plot(hcl_spearman, labels = meta$condition)
layout(matrix(1:1,nrow=1))
```

## PCA

```{r}
pca <- prcomp(log1p(t(expr[meta_genes$expressed,])), center = TRUE, scale. = TRUE)
```

```{r}
eigs <- pca$sdev^2
percent_variance <- (eigs / sum(eigs)) * 100
plot(percent_variance, type = "b",  
     xlab = "Principal Component (PC)", 
     ylab = "Percentage of Variance Explained (%)")
```

```{r}
ggplot(data.frame(pca$x, meta)) +
  geom_point(aes(x = PC1, y = PC2, color = condition, shape = Organ), size = 5)
```

### **Highly variable genes identification**

```{r}
estimate_variability <- function(expr){
  means <- apply(expr, 1, mean)
  vars <- apply(expr, 1, var)
  cv2 <- vars / means^2
  
  minMeanForFit <- unname(median(means[which(cv2 > 0.3)]))
  useForFit <- means >= minMeanForFit
  fit <- glm.fit(x = cbind(a0 = 1, a1tilde = 1/means[useForFit]),
                 y = cv2[useForFit],
                 family = Gamma(link = "identity"))
  a0 <- unname(fit$coefficients["a0"])
  a1 <- unname(fit$coefficients["a1tilde"])
  
  xg <- exp(seq(min(log(means[means>0])), max(log(means)), length.out=1000))
  vfit <- a1/xg + a0
  df <- ncol(expr) - 1
  afit <- a1/means+a0
  varFitRatio <- vars/(afit*means^2)
  pval <- pchisq(varFitRatio*df,df=df,lower.tail=F)
  
  res <- data.frame(mean = means,
                    var = vars,
                    cv2 = cv2,
                    useForFit = useForFit,
                    pval = pval,
                    padj = p.adjust(pval, method="BH"),
                    row.names = rownames(expr))
  return(res)
}
```

### Test for significance of overdispersion:

```{r}
var_genes <- estimate_variability(expr[meta_genes$expressed,])
meta_genes$highvar <- meta_genes$uniprot_gn_id %in% rownames(var_genes)[which(var_genes$padj < 0.01)]
```

```{r}
corr_spearman_highvar <- cor(expr[meta_genes$highvar,], method = "spearman")
hcl_spearman_highvar <- hclust(as.dist(1 - corr_spearman_highvar))
layout(matrix(1:2,nrow=1))
plot(hcl_spearman_highvar, labels = meta$Organ)
plot(hcl_spearman_highvar, labels = meta$condition)
```

```{r}
pca_highvar <- prcomp(log1p(t(expr[meta_genes$highvar,])), center = TRUE, scale. = TRUE)
ggplot(data.frame(pca_highvar$x, meta)) +
  geom_point(aes(x = PC1, y = PC2, color = condition, shape = Organ), size = 5)
```

The PCA plot is not better in this case.

# **Differential expression analysis**

## First approach

```{r}
DE_test <- function(expr,
                    cond,
                    ctrl = NULL,
                    covar = NULL,
                    padj_method = p.adjust.methods){
  pval_fc <- data.frame(t(pbapply(expr, 1, function(e){
    dat <- data.frame(y = log1p(e),
                      cond = cond)
    if (! is.null(covar))
      dat <- data.frame(dat, covar)
    
    m1 <- lm(y ~ ., data = dat)
    m0 <- lm(y ~ . - cond, data = dat)
    test <- anova(m1, m0)
    pval <- test$Pr[2]
    
    avgs <- tapply(log1p(e), cond, mean)
    if (! is.null(ctrl) && sum(cond %in% ctrl) > 0){
      fc <- exp(max(avgs[names(avgs) != ctrl]) - avgs[ctrl])
    } else{
      fc <- exp(max(avgs) - min(avgs))
    }
    
    return(c(pval = unname(pval), fc = unname(fc)))
  })), row.names = rownames(expr))
  padj <- p.adjust(pval_fc$pval, method = padj_method)
  return(data.frame(pval_fc, "padj" = padj)[,c("pval","padj","fc")])
}

res_DE <- DE_test(expr = expr[meta_genes$expressed,],
                  cond = meta$condition,
                  covar = meta %>% dplyr::select(Organ)) %>%
  tibble::rownames_to_column("gene")
```

```{r}
res_DE <- res_DE %>%
  mutate(DE = padj < 0.1 & fc > 2) %>%
  mutate(DEG = ifelse(DE, gene, NA))

ggplot(res_DE, aes(x = log(fc), y = -log10(padj), col=DE, label=DEG)) +
  geom_point() +
  geom_text_repel() +
  geom_vline(xintercept=c(log(2), 0), col="#303030", linetype="dotted") +
  geom_hline(yintercept=-log10(0.1), col="#303030", linetype="dotted") +
  scale_color_manual(values=c("#909090", "red")) +
  theme_minimal()
```

The DEG are: A0A0A6YY53, P05533, G3UWN9.

## **DESeq2**

```{r}
tx2gene <- getBM(attributes = c("uniprot_gn_id","ensembl_transcript_id_version",
                                "ensembl_gene_id"),
                 filters = "uniprot_gn_id",
                 values = rownames(expr),
                 mart = ensembl) %>%
  dplyr::select(ensembl_transcript_id_version, ensembl_gene_id, uniprot_gn_id)

files <- file.path("rsem", samples, paste0(samples,".isoforms.results"))
txi <- tximport(files, type = "rsem", tx2gene = tx2gene)

dds <- DESeqDataSetFromTximport(txi,
                                 colData = meta,
                                 design = ~ Organ + condition + Organ:condition)
```

Apply expression threshold filtering to the object by subsetting only those we consider as expressed above

```{r}
abundances <- txi$abundance
expressed_dds <- rowMeans(abundances > 0) >= 0.5 | rowMeans(abundances) >= 1
dds_filtered <- dds[which(expressed_dds), ]
```

Research question: Does the **full model** (which allows the infection effect to be different in each organ) explain the data *significantly better* than the **reduced model** (which forces the infection effect to be the same in both organs)?

```{r}
dds_filtered <- DESeq(dds_filtered, test="LRT", reduced = ~ Organ + condition)
res_DESeq2 <- results(dds_filtered)
```

```{r}
res_DESeq2 <- res_DESeq2[order(res_DESeq2$padj), ]
head(res_DESeq2)
```

```{r}
res_DE$gene_ensembl_ID <- meta_genes$ensembl_gene_id[match(res_DE$gene, meta_genes$uniprot_gn_id)]

res_DESeq2_df <- as.data.frame(res_DESeq2) %>%
  tibble::rownames_to_column("gene_ensembl_ID")

combined_res <- dplyr::inner_join(res_DESeq2_df, res_DE, by = "gene_ensembl_ID")

cor(combined_res$padj.x, combined_res$padj.y, 
    method = "spearman", 
    use = "complete.obs")

layout(matrix(1:2, nrow=1))
plot(-log10(combined_res$pvalue),
     -log10(combined_res$pval),
     xlab = "-log10(pval DESeq2)", ylab = "-log10(pval DE)", pch=16)
smoothScatter(-log10(combined_res$pvalue),
              -log10(combined_res$pval),
              xlab = "-log10(pval DESeq2)", ylab = "-log10(pval DE)", pch=16)
```

Our analysis showed that the two DE methods produced results with zero correlation (Spearman's 0.000256). This confirms that the statistical model is critical, and the `DESeq2` results, which are based on a model specifically designed for raw counts, are the more statistically appropriate choice.

```{r}
table(p.adjust(combined_res$pvalue, method="bonferroni") < 0.1,
      combined_res$pval < 0.1)
```

## **Grouping of the identified DEGs**
